version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: spond-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DBNAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}"] # Use variables here too
      interval: 5s
      timeout: 5s
      retries: 5

  dbt-cli:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: spond-dbt-cli
    depends_on:
      db:
        condition: service_healthy
    environment:
      DBT_POSTGRES_HOST: db
      DBT_POSTGRES_PORT: ${POSTGRES_PORT}
      DBT_POSTGRES_USER: ${POSTGRES_USER}
      DBT_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DBT_POSTGRES_DBNAME: ${POSTGRES_DBNAME}
      DBT_POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}
    volumes:
      - ./dbt:/usr/app/dbt
      - ./dbt/profiles.yml:/root/.dbt/profiles.yml:ro
    working_dir: /usr/app/dbt
    command: python -m dbt build
  
  terraform-cli:
    build:
      context: .
      dockerfile: Dockerfile.terraform
    container_name: spond-terraform-cli
    depends_on:
      db:
        condition: service_healthy
    environment:
      TF_VAR_PG_HOST: db
      TF_VAR_PG_PORT: ${POSTGRES_PORT}
      TF_VAR_PG_USER: ${POSTGRES_USER}
      TF_VAR_PG_PASSWORD: ${POSTGRES_PASSWORD}
      TF_VAR_PG_DBNAME: postgres
    volumes:
      - ./terraform:/usr/src/app/terraform
    working_dir: /usr/src/app/terraform

volumes:
  postgres_data: